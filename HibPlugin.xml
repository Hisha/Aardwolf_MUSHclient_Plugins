<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Saturday, May 04, 2024, 3:52 PM -->
<!-- MuClient version 5.07-pre -->

<!-- Plugin "HibPlugin" generated by Plugin Wizard -->

<muclient>
<plugin
   name="HibPlugin"
   author="Hiballl"
   id="e81303364f53ab26d34d5436"
   language="Lua"
   purpose="Plugin to combine all plugins for cleanup"
   save_state="y"
   date_written="2024-05-04 15:48:10"
   requires="5.07"
   version="3.0"
   >

</plugin>


<!--  Triggers  -->

<triggers>

	<!-- HibPlugin Trigger Section -->
  <trigger
   enabled="y"
   group="HibPlugin"
   match="^You raise a level! You are now level (?P&lt;levelCurrent&gt;.*)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setLevel("%&lt;levelCurrent&gt;")</send>
  </trigger>
  <trigger
   enabled="y"
   group="HibPlugin"
   match="^\* Remort transformation complete!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setLevel("1")</send>
  </trigger>
  <trigger
   enabled="y"
   group="HibPlugin"
   match="^Congratulations! You are now a superhero!.*$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setLevel("201")</send>
  </trigger>
  
  <!-- HibPlugin Trigger Section -->
  
  <!-- Scriber Trigger Section -->
  <trigger
   enabled="y"
   expand_variables="y"
   group="Scriber"
   match="The magic enchantment has failed --- the scroll vanishes."
   send_to="12"
   sequence="100"
  >
  <send>Execute("scriber " ..getSpellName())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Scriber"
   match="You buy * a blank scroll from Mayvor, master of mystic permeations for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("put all.scroll " ..getBlankScrollBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Scriber"
   match="You have imbued a new spell to the scroll."
   send_to="12"
   sequence="100"
  >
  <send>setSpellCount(getSpellCount() + 1)
Execute("evaluateScribe")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Scriber"
   match="You lost your concentration while trying to scribe the new magic."
   send_to="12"
   sequence="100"
  >
  <send>Send("scribe " ..getSpellName())</send>
  </trigger>
  <!-- Scriber Trigger Section -->
  
  <!-- LevelingMessages Trigger Section -->
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) scours the land in search of enlightenment, purging another (?P&lt;lpmLevel&gt;.*) souls by the cold steel of Apollyon's blade\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Red","Black","+ ","White","Black","P","LightGrey","Black","e","Red","Black","r","DarkRed","Black","dit","Red","Black","i","LightGrey","Black","o","White","Black","n","Red","Black"," +","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: A bell tolls in the darkness as (?P&lt;lpmName&gt;.*) leads (?P&lt;lpmLevel&gt;.*) souls to eternal misery\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkBlue","Black","~","White","Black","-","Cyan","Black","/","DarkCyan","Black","P","Blue","Black","yr","DarkCyan","Black","e","Cyan","Black","\\\\","White","Black","-","DarkBlue","Black","~","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: The voice of Dak'kon leads (?P&lt;lpmName&gt;.*) to level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Blue","Black","(","White","Black","^","DarkBlue","Black","\\\\","White","Black","Rh","LightGrey","Black","ab","White","Black","do","DarkBlue","Black","/","White","Black","^","Blue","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Clans start to panic as raider (?P&lt;lpmName&gt;.*) obtains level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","(","Yellow","Black","Re","Red","Black","tr","DarkRed","Black","ibu","Red","Black","ti","Yellow","Black","on","White","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) has gained both knowledge and understanding, advancing in power to level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Magenta","Black","(","Yellow","Black","Seekers","Magenta","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: The black stone guides (?P&lt;lpmName&gt;.*) into gaining level (?P&lt;lpmLevel&gt;.*)\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Lime","Black","(&gt;","White","Black","Touchstone","Lime","Black","&lt;)","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) has attained a deeper understanding of the three pillars, ascending to level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black","INFO: ","Yellow","Black","-=","Cyan","Black","Tanelorn","Yellow","Black","}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) submits another (?P&lt;lpmLevel&gt;.*) brain samples for research in the name of Science\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Lime","Black","{","Cyan","Black","Twinlobe","Lime","Black","}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Screams echo through the mist as (?P&lt;lpmName&gt;.*) sacrifices (?P&lt;lpmLevel&gt;.*) captives to Xiuhtecuhtli\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkRed","Black","^","DarkBlue","Black","X","DarkRed","Black",".","DarkBlue","Black","u","DarkRed","Black","{","DarkBlue","Black","N","DarkRed","Black","}","DarkBlue","Black","t","DarkRed","Black",".","DarkBlue","Black","I","DarkRed","Black","^","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: The wind of duality strengthens, as (?P&lt;lpmName&gt;.*) aligns (?P&lt;lpmName2&gt;.*)self (?P&lt;lpmLevel&gt;.*) steps closer with Tao\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Green","Black","\\\\}","LightGrey","Black","Tao","Green","Black","{/","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) has gained favor in the eyes of the Dark One, and gains level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkRed","Black","[","Red","Black","Ba'al","DarkRed","Black","]","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) raises a level. Now up to level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: - No Clan - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: A sip of Kyrridwen's brew imparts guarded knowledge as (?P&lt;lpmName&gt;.*) gains level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Gray","Black","/","White","Black","|","Gray","Black","\\\\","DarkGreen","Black","Dr","White","Black","u","GoldenRod","Black","id","Gray","Black","/","White","Black","|","Gray","Black","\\\\","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) has achieved level (?P&lt;lpmLevel&gt;.*) of military training\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","&gt;","GoldenRod","Black","&gt;","Red","Black","&gt;","DarkRed","Black","-","White","Black","IMPERIUM","DarkRed","Black","-","Red","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Battle may have taken its toll but through constant training (?P&lt;lpmName&gt;.*) has obtained level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Lime","Black","][","White","Black","+","Lime","Black","][ ","White","Black","A","DarkGreen","Black","m","Lime","Black","az","DarkGreen","Black","o","White","Black","n","Lime","Black"," ][","White","Black","+","Lime","Black","][","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) frantically fumbles for a pen to write down a new haiku for gaining level (?P&lt;lpmLevel&gt;.*)\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","[","Red","Black","B","Lime","Black","a","Cyan","Black","r","Yellow","Black","d","White","Black","]","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Another battalion falls before (?P&lt;lpmName&gt;.*) as (?P&lt;lpmName2&gt;.*) raises to level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Yellow","Black","|","White","Black","=x=","Lime","Black","BOOT","White","Black","=x=","Yellow","Black","|","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: The pirates plunder nearby villages to celebrate (?P&lt;lpmName&gt;.*) reaching level (?P&lt;lpmLevel&gt;.*)\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Cyan","Black","o-}","Yellow","Black","HooK","Cyan","Black","{-o","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Constant conditioning has prepared (?P&lt;lpmName&gt;.*) for level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","-|","DarkCyan","Black","Dominion","White","Black","|-","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Dragons belch fire and Vorel exults as (?P&lt;lpmName&gt;.*) slays (?P&lt;lpmLevel&gt;.*) villains\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","-","Lime","Black","=","White","Black","*","Lime","Black",")","White","Black","Dragon","Lime","Black","(","White","Black","*","Lime","Black","=","White","Black","-","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Raising their sword in honor to Athena, (?P&lt;lpmName&gt;.*) attains level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Cyan","Black","[","Lime","Black","Emerald","Cyan","Black","]","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: The Three Moons blaze in glory as (?P&lt;lpmName&gt;.*) reaches level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","{","Red","Black","chaos","White","Black","}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: The minions of darkness squeal in terror as (?P&lt;lpmName&gt;.*) reaches level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Blue","Black","&lt;","White","Black","-","Blue","Black",")","White","Black","light","Blue","Black","(","White","Black","-","Blue","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) successfully fends off another libel lawsuit! \(Full story on page (?P&lt;lpmLevel&gt;.*)\!\)$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Magenta","Black","&lt;","DarkMagenta","Black","&lt;","GoldenRod","Black","|","White","Black","Gaardian","GoldenRod","Black","|","DarkMagenta","Black","&gt;","Magenta","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) is surrounded by the souls of (?P&lt;lpmLevel&gt;.*) legendary samurai and ninjas who bestow their approval\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","{-=","DarkRed","Black","Masaki","White","Black","=-}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Stendarr's angel sings praises to (?P&lt;lpmName&gt;.*) for attaining level (?P&lt;lpmLevel&gt;.*)\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Blue","Black","&lt;(","White","Black","=","Yellow","Black","Watchmen","White","Black","=","Blue","Black",")&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Nobody cares as the outcast (?P&lt;lpmName&gt;.*) reaches level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkBlue","Black","(","Magenta","Black","Outcast","DarkBlue","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Thor's hammer shatters the earth, sending lightning across the land as (?P&lt;lpmName&gt;.*) gains level (?P&lt;lpmLevel&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Yellow","Black","&lt;","Red","Black","*","Yellow","Black","&gt;","Red","Black","&lt;","Yellow","Black","|","Red","Black","Crimson","Yellow","Black","|","Red","Black","&gt;","Yellow","Black","&lt;","Red","Black","*","Yellow","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Weapons gleam and trumpets sound from the Crusader's grand temple as (?P&lt;lpmName&gt;.*) leads (?P&lt;lpmLevel&gt;.*) Holy Knights on a quest for another holy artifact\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Magenta","Black","=","White","Black","Crusader","Magenta","Black","=","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Xarmaroch is pleased as (?P&lt;lpmName&gt;.*) prepares (?P&lt;lpmLevel&gt;.*) more followers for the Rebirth\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Red","Black","(","Green","Black","+","Blue","Black",")","White","Black","Cabal","Cyan","Black","(","Green","Black","+","GoldenRod","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Check your PK ranges, (?P&lt;lpmName&gt;.*)'s body count just hit (?P&lt;lpmLevel&gt;.*)\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black","INFO: ","Blue","Black","/","DarkBlue","Black","Shadokil","Blue","Black","/","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Level_Messages"
   match="^INFO: Working in the shadows, (?P&lt;lpmName&gt;.*) gathers (?P&lt;lpmLevel&gt;.*) followers of The Revolution\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkRed","Black",":","White","Black",":","GoldenRod","Black",":","White","Black","LoquI","GoldenRod","Black",":","White","Black",":","DarkRed","Black",":","Red","Black", " - %&lt;lpmName&gt; (","White","Black","%&lt;lpmLevel&gt;","Red","Black",")")</send>
  </trigger>
  <!-- LevelingMessages Trigger Section -->
  
  <!-- PupMessages Trigger Section -->
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) just beat Aardwolf...again\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Red","Black","+ ","White","Black","P","LightGrey","Black","e","Red","Black","r","DarkRed","Black","dit","Red","Black","i","LightGrey","Black","o","White","Black","n","Red","Black"," +","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) culls more souls and watches them ignite as Sorrow stokes the inferno\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkBlue","Black","~","White","Black","-","Cyan","Black","/","DarkCyan","Black","P","Blue","Black","yr","DarkCyan","Black","e","Cyan","Black","\\\\","White","Black","-","DarkBlue","Black","~","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) amasses new power and leads the Dark Templars in new rituals to Dak'kon\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Blue","Black","(","White","Black","^","DarkBlue","Black","\\\\","White","Black","Rh","LightGrey","Black","ab","White","Black","do","DarkBlue","Black","/","White","Black","^","Blue","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Blood drips from (?P&lt;lpmName&gt;.*)'s weapon as they turn their gaze towards you\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","(","Yellow","Black","Re","Red","Black","tr","DarkRed","Black","ibu","Red","Black","ti","Yellow","Black","on","White","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: The genius (?P&lt;lpmName&gt;.*) has found another way to avoid remorting\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Magenta","Black","(","Yellow","Black","Seekers","Magenta","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Stones fall from the high mountains as (?P&lt;lpmName&gt;.*) increases in strength\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Lime","Black","(&gt;","White","Black","Touchstone","Lime","Black","&lt;)","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) has achieved fuller understanding of the three pillars\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black","INFO: ","Yellow","Black","-=","Cyan","Black","Tanelorn","Yellow","Black","}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) puts more tape on his glasses as he nerds out even more\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Lime","Black","{","Cyan","Black","Twinlobe","Lime","Black","}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Blood gushes from the latest sacrifice as (?P&lt;lpmName&gt;.*) gains the approval of Xiuhtecuhtli\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkRed","Black","^","DarkBlue","Black","X","DarkRed","Black",".","DarkBlue","Black","u","DarkRed","Black","{","DarkBlue","Black","N","DarkRed","Black","}","DarkBlue","Black","t","DarkRed","Black",".","DarkBlue","Black","I","DarkRed","Black","^","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) takes a step closer to Nirvana as (his|her|their) power increases\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Green","Black","\\\\}","LightGrey","Black","Tao","Green","Black","{/","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: The True Source floods (?P&lt;lpmName&gt;.*) with Power\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkRed","Black","[","Red","Black","Ba'al","DarkRed","Black","]","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: The mighty hero (?P&lt;lpmName&gt;.*) has increased in power\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: - No Clan - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Another tale about (?P&lt;lpmName&gt;.*) is written in the Book of Mabinogian\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Gray","Black","/","White","Black","|","Gray","Black","\\\\","DarkGreen","Black","Dr","White","Black","u","GoldenRod","Black","id","Gray","Black","/","White","Black","|","Gray","Black","\\\\","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Bloodied but victorious, (?P&lt;lpmName&gt;.*) rises and screams &quot;Veni Vidi Vici\!&quot;$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","&gt;","GoldenRod","Black","&gt;","Red","Black","&gt;","DarkRed","Black","-","White","Black","IMPERIUM","DarkRed","Black","-","Red","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Reflecting from constant battle, (?P&lt;lpmName&gt;.*)'s strength radiates within\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Lime","Black","][","White","Black","+","Lime","Black","][ ","White","Black","A","DarkGreen","Black","m","Lime","Black","az","DarkGreen","Black","o","White","Black","n","Lime","Black"," ][","White","Black","+","Lime","Black","][","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Orchestral music swells as (?P&lt;lpmName&gt;.*) completes another rousing verse in the epic Song of Aardwolf\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","[","Red","Black","B","Lime","Black","a","Cyan","Black","r","Yellow","Black","d","White","Black","]","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: People burn and villages flee in terror as (?P&lt;lpmName&gt;.*) conquers more of the world\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Cyan","Black","o-}","Yellow","Black","HooK","Cyan","Black","{-o","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Rasputin inscribes (?P&lt;lpmName&gt;.*)'s name in the Word\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","-|","DarkCyan","Black","Dominion","White","Black","|-","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: A sword is drawn as Draconian fury pulses through (?P&lt;lpmName&gt;.*)\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","-","Lime","Black","=","White","Black","*","Lime","Black",")","White","Black","Dragon","Lime","Black","(","White","Black","*","Lime","Black","=","White","Black","-","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) kneels in worship to Athena in celebration of another glorious victory\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Cyan","Black","[","Lime","Black","Emerald","Cyan","Black","]","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: The very Fabric of Magic shudders as (?P&lt;lpmName&gt;.*)'s power increases\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","{","Red","Black","chaos","White","Black","}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: A magnificent light shines before (?P&lt;lpmName&gt;.*) leading them toward the virtue of Radience\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Blue","Black","&lt;","White","Black","-","Blue","Black",")","White","Black","light","Blue","Black","(","White","Black","-","Blue","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Mild mannered reporter (?P&lt;lpmName&gt;.*) leaps into a nearby phone booth, mistaking it for a dressing room\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Magenta","Black","&lt;","DarkMagenta","Black","&lt;","GoldenRod","Black","|","White","Black","Gaardian","GoldenRod","Black","|","DarkMagenta","Black","&gt;","Magenta","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Not a sound is heard as (?P&lt;lpmName&gt;.*) crosses the nightingale floor and steals your last breath\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","White","Black","{-=","DarkRed","Black","Masaki","White","Black","=-}","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: Stendarr smiles as his holy champion, (?P&lt;lpmName&gt;.*), triumphs over evil\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Blue","Black","&lt;(","White","Black","=","Yellow","Black","Watchmen","White","Black","=","Blue","Black",")&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*)'s hammer shatters the earth, sending lightning across the land\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Yellow","Black","&lt;","Red","Black","*","Yellow","Black","&gt;","Red","Black","&lt;","Yellow","Black","|","Red","Black","Crimson","Yellow","Black","|","Red","Black","&gt;","Yellow","Black","&lt;","Red","Black","*","Yellow","Black","&gt;","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: There is rejoicing in the Temple as Crusader Hero (?P&lt;lpmName&gt;.*) increases in power\!$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Magenta","Black","=","White","Black","Crusader","Magenta","Black","=","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: The planes quake as (?P&lt;lpmName&gt;.*) increases in power\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","Red","Black","(","Green","Black","+","Blue","Black",")","White","Black","Cabal","Cyan","Black","(","Green","Black","+","GoldenRod","Black",")","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: (?P&lt;lpmName&gt;.*) is at work close by, better watch your back\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black","INFO: ","Blue","Black","/","DarkBlue","Black","Shadokil","Blue","Black","/","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="PuP_Messages"
   match="^INFO: You hear slight whispers as (?P&lt;lpmName&gt;.*) helps The Revolution grow\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("Red","Black", "INFO: ","DarkRed","Black",":","White","Black",":","GoldenRod","Black",":","White","Black","LoquI","GoldenRod","Black",":","White","Black",":","DarkRed","Black",":","Red","Black", " - %&lt;lpmName&gt; (","White","Black","PuP","Red","Black",")")</send>
  </trigger>
  <!-- PupMessages Trigger Section -->
  
  <!-- Ahunt Trigger Section -->
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^You are almost certain that .+ is (north|east|south|west|down|up) from here\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if GetVariable("AhuntStatus") == 'on' then
    SetVariable ("AhuntLastDir","%1")

    Send ("%1")

    Send ("hunt " .. GetVariable("AhuntMob"))
end
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^There are traces of .+ having been here. Perhaps they left (north|east|south|west|down|up)\?$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if GetVariable("AhuntStatus") == 'on' then
    SetVariable ("AhuntLastDir","%1")

    Send ("%1")

    Send ("hunt " .. GetVariable("AhuntMob"))
end
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^You are confident that .+ passed through here, heading (north|east|south|west|down|up)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if GetVariable("AhuntStatus") == 'on' then
    SetVariable ("AhuntLastDir","%1")

    Send ("%1")

    Send ("hunt " .. GetVariable("AhuntMob"))
end
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^You are certain that .+ is (north|east|south|west|down|up) from here\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if GetVariable("AhuntStatus") == 'on' then
    SetVariable ("AhuntLastDir","%1")
    Send ("%1")
    Send ("hunt " .. GetVariable("AhuntMob"))
end
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^.+ is here\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note ("* * Target found! aHunt turning off * *")

SetVariable ("AhuntStatus","off")

SetVariable ("AhuntMob","")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^No-one in this area by that name\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("AhuntStatus","off")

SetVariable ("AhuntMob","")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^The trail of .+ is confusing, but you're reasonably sure .+ headed (north|east|south|west|down|up)\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if GetVariable("AhuntStatus") == 'on' then
    SetVariable ("AhuntLastDir","%1")

    Send ("%1")

    Send ("hunt " .. GetVariable("AhuntMob"))
end
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^You have no idea what you're doing, but maybe .+ left (north|east|south|west|down|up)$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if GetVariable("AhuntStatus") == 'on' then
    SetVariable ("AhuntLastDir","%1")

    Send ("%1")

    Send ("hunt " .. GetVariable("AhuntMob"))
end
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^Magical wards around .+ bounce you back\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>if GetVariable("AhuntStatus") == 'on' then
    Send ("open " .. GetVariable("AhuntLastDir"))

    Send (GetVariable("AhuntLastDir"))

end
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^You do not have a key for the door\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("AhuntMob","")

SetVariable ("AhuntStatus","off")

Note ("* * Ahunt Turned Off * *")
</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^No way\! You are still fighting\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("AhuntStatus","off")

SetVariable ("AhuntMob","")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^You see no .+ here\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("AhuntStatus","off")

SetVariable ("AhuntMob","")</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   match="^You seem unable to hunt that target for some reason\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local ahuntMob = GetVariable("AhuntMob")

if GetVariable("AhuntStatus") == 'on' then

   Send ("where " .. ahuntMob)

end

SetVariable ("AhuntStatus","off")

SetVariable ("AhuntMob","")</send>
  </trigger>
  <!-- Ahunt Trigger Section -->
  
  <!-- Potion Trigger Section -->
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Green Herbal Tea from Jojobo for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.tea")
  Send("put all.tea " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Call upon spirits from Jojobo for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.spirits")
  Send("put all.spirits " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * tankard of Rotgut from A shady-looking smuggler for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.rotgut")
  Send("put all.rotgut " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Ancestral Power from Jojobo for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.ancestral")
  Send("put all.ancestral " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Captain Morgan's Grog from A shady-looking smuggler for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.level200mana")
  Send("put all.level200mana " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Moonlight Wine from Jojobo for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.moonlight")
  Send("put all.moonlight " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Jade Elixir from Jojobo for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.jade")
  Send("put all.jade " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Keg of Rum from Buffet Keeper for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.hookheal")
  Send("put all.hookheal " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Freeze-Dried Astronaut Rum from Buffet Keeper for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.freeze-dried")
  Send("put all.freeze-dried " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * Divine Refreshment from Sir Richard for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.crusader50moves")
  Send("put all.crusader50moves " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * a Refreshing Idea from Jojobo for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.domiref")
  Send("put all.domiref " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * FaetorAde from The Clurichaun for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.daoinerefresh")
  Send("put all.daoinerefresh " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * (!(Griffon's Blood)!) from Aeleron for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.griffon")
  Send("put all.griffon " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * (!(Eyes of the Wolf)!) from Aeleron for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.eyes")
  Send("put all.eyes " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * (Seekers) Elixir of Maneuverability from Milo's Apprentice for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.seekers48spellup")
  Send("put all.seekers48spellup " ..getPotionBag())</send>
  </trigger>
  <trigger
   enabled="y"
   expand_variables="y"
   group="potions"
   match="You buy * (Seekers) Elixir of Free Movement from Milo's Apprentice for * gold."
   send_to="12"
   sequence="100"
  >
  <send>Send("keep all.seekers17dissolve")
  Send("put all.seekers17dissolve " ..getPotionBag())</send>
  </trigger>
  <!-- Potion Trigger Section -->
  
</triggers>

<!--  Aliases  -->
<aliases>

	<!-- HibPlugin Aliases Section -->
  <alias
   match="^hib -help$"
   enabled="y"
   group="HibPlugin"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("************ HibPlugin Commands ************")
		Note(" hib -help     - This list of commands      ")
		Note(" hib -vars     - List of variable values    ")
		Note(" hib_Level     - Set Player level variable  ")
		Note(" hib_Tier      - Set Tier level variable    ")
		Note("********************************************")
		Note("***************Sections*********************")
		Note(" Auto Hunt             - ahunt -help        ")
		Note(" Level/Pup Messages    - pup -help          ")
		Note(" Potions               - pot -help          ")
		Note(" Scriber               - scriber -help      ")
		Note(" Weapon Master         - wm -help           ")
		Note("********************************************")</send>
  </alias>
  <alias
   match="^hib -vars$"
   enabled="y"
   group="HibPlugin"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("************HibPlugin Variables *************")
		Note(" Current Level:      " ..getPlayerLevel())
		Note(" Current Tier:       " ..getPlayerTier())
		Note("*********************************************")</send>
  </alias>
  <alias
   match="^hib_Level( .*){0,1}$"
   enabled="y"
   group="HibPlugin"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setLevel(Trim("%1"))</send>
  </alias>
  <alias
   match="^hib_Tier( .*){0,1}$"
   enabled="y"
   group="HibPlugin"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setTier(Trim("%1"))</send>
  </alias>
  <!-- HibPlugin Aliases Section -->
  
  <!-- Weapon Master Aliases Section -->
  <alias
   match="^wm -help$"
   enabled="y"
   group="WeaponMaster"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("***********Weapon Master Commands **********")
		Note(" wmSD          - Swaps to dual wield       ")
		Note(" wmSU          - Swaps to shield           ")
        Note(" wmAlt         - Swaps to alternate weapon ")
		Note(" wmPri         - Swaps to primary weapon   ")
        Note(" wmSwap        - Swaps to level correct    ")
        Note("                   weapon configuration    ")
        Note(" weaponAdd     - Add weapon to database    ")
        Note(" holdAdd       - Add hold item to database ")
        Note(" shieldAdd     - Add shield to database    ")
		Note(" weaponList    - List of weapons in db     ")
		Note(" holdList      - List of hold items in db  ")
		Note(" shieldList    - List of shields in db     ")
        Note(" wm -help      - This list of commands     ")
		Note(" wm -vars      - List of variable values   ")
		Note(" wm WeapBag    - Set Weapon bag variable   ")
		Note("********************************************")</send>
  </alias>
  <alias
   match="^wm -vars$"
   enabled="y"
   group="WeaponMaster"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("**************Weapon Variables **************")
		Note(" Weapon Bag:         " ..getWeaponBag())
		Note(" Shield Up:          " ..getShieldUp())
		Note(" Alt Up:             " ..getAltUp())
		Note(" Current MH:         " ..getMHCurrent())
		Note(" Current OH:         " ..getOHCurrent())
		Note(" Current Hold Item:  " ..getHoldCurrent())
		Note(" Current Shield:     " ..getShieldCurrent())
		Note(" Current Alt:        " ..getAltCurrent())
		Note("*********************************************")</send>
  </alias>
  <alias
   match="^wm WeapBag( .*){0,1}$"
   enabled="y"
   group="WeaponMaster"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>setWeaponBag(Trim("%1"))
Note ("Weapons Bag is now: " ..Trim("%1"))</send>
  </alias>
  <alias
   match="^weaponAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>weaponInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^holdAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>holdInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^shieldAdd( .*)?$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   send_to="12"
   sequence="100"
  >
  <send>shieldInsert(Trim("%1"))</send>
  </alias>
  <alias
   match="^wmSU$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="shieldUp"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmSD$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="shieldDown"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmSwap$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="weapSwap"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmAlt$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="altUp"
   sequence="100"
  >
  </alias>
  <alias
   match="^wmPri$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="altDown"
   sequence="100"
  >
  </alias>
  <alias
   match="^weaponList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getWeaponList"
   sequence="100"
  >
  </alias>
  <alias
   match="^holdList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getHoldList"
   sequence="100"
  >
  </alias>
  <alias
   match="^shieldList$"
   enabled="y"
   regexp="y"
   group="WeaponMaster"
   script="getShieldList"
   sequence="100"
  >
  </alias>
  <!-- Weapon Master Aliases Section -->
  
  <!-- Scriber Aliases Section -->
  <alias
   match="^scriber( .*){0,1}$"
   enabled="y"
   group="Scriber"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%1")
	  Execute("resetScribeVariables")
      Send("take scroll " ..getBlankScrollBag())
      Send("hold scroll")
      setSpellName(vItem)
      Send("scribe " ..vItem)</send>
  </alias>
  <alias
   match="^scriber buy$"
   enabled="y"
   group="Scriber"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Execute("mapper goto 32467")
      Send("buy " ..getScrollBuyNumber().. " 1")</send>
  </alias>
  <alias
   match="^scriber -help$"
   enabled="y"
   group="Scriber"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("*****************Scriber Commands *****************")
		Note("resetScribeVariables  - Reset some variables.     *")
	    Note("scriber               - Command to scribe scroll. *")
	    Note("scriber buy           - Go buy some scrolls.      *")
	    Note("scriber -help         - This help screen.         *")
	    Note("scriber -vars         - List of scriber variables.*")
	    Note("setBlankScrollBag     - Bag for blank scrolls.    *")
	    Note("setScrollBag          - Bag for completed scrolls.*")
	    Note("setScrollBuyCount     - How many blank scrolls to *")
	    Note("                          buy at a time.          *")
	    Note("setScrollSpellCount   - How many spells added     *")
	    Note("                          to a scroll.            *")
	    Note("***************************************************")</send>
  </alias>
  <alias
   match="^scriber -vars$"
   enabled="y"
   group="Scriber"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("**************Scriber Variables **************")
		Note(" ScribeScrollBuyNumber: " ..getScrollBuyNumber())
	    Note(" ScribeScrollBag:       " ..getScrollBag())
	    Note(" ScribeSpellName:      " ..getSpellName())
	    Note(" ScribeSpellsRequired: " ..getSpellCountRequired())
	    Note(" ScribeBlankScrollBag:  " ..getBlankScrollBag())
	    Note("**********************************************")</send>
  </alias>
  <alias
   match="^rincon$"
   enabled="y"
   expand_variables="y"
   group="Scriber"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take incompletehealing " ..getScrollBag())
Send("recite incompletehealing")</send>
  </alias>
  <alias
   match="^setScribeSpellCount( .*){0,1}$"
   enabled="y"
   expand_variables="y"
   group="Scriber"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local NewCount = Trim("%1")
setScribeSpellCount(NewCount)
Note ("Number of Spells now set to: " ..NewCount)</send>
  </alias>
  <alias
   match="^setScrollBag( .*){0,1}$"
   enabled="y"
   expand_variables="y"
   group="Scriber"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local NewBag = Trim("%1")
setScrollBag(NewBag)
Note ("Scroll Bag now set to: " ..NewBag)</send>
  </alias>
  <alias
   match="^setBlankScrollBag( .*){0,1}$"
   enabled="y"
   expand_variables="y"
   group="Scriber"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local NewBag = Trim("%1")
setBlankScrollBag(NewBag)
Note ("Blank Scroll Bag now set to: " ..NewBag)</send>
  </alias>
  <alias
   match="^setScrollBuyCount( .*){0,1}$"
   enabled="y"
   expand_variables="y"
   group="Scriber"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local NewCount = Trim("%1")
setScrollBuyCount(NewCount)
Note ("Scroll Buy Number now set to: " ..NewCount)</send>
  </alias>
  <alias
   match="^evaluateScribe$"
   enabled="y"
   regexp="y"
   group="Scriber"
   script="evalScroll"
   sequence="100"
  >
  </alias>
  <alias
   match="^resetScribeVariables$"
   enabled="y"
   regexp="y"
   group="Scriber"
   script="resetScribeVars"
   sequence="100"
  >
  </alias>
  <!-- Scriber Aliases Section -->
  
  <!-- LevelingMessages Aliases Section -->
  <alias
   match="^pup -help$"

   enabled="y"
   group="Level/Pup"
   expand_variables="y"

   regexp="y"
   send_to="12"
   sequence="100"

  >
  <send>    Note("*****************Level/Pup Commands ***************")
	    Note(" LevelMessagesOn   - Turn Leveling Messages on.   *")
	    Note(" LevelMessagesOff  - Turn Leveling Messages off.  *")
	    Note(" PupMessagesOn     - Turn Pup Messages on.        *")
	    Note(" PupMessagesOff    - Turn Pup Messages off.       *")
	    Note("***************************************************")</send>
  </alias>
  <alias
   match="LevelMessagesOn"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

EnableTriggerGroup("Level_Messages", true)
Send ("Info Levels")
Note ("Level Messages enabled")

</send>
  </alias>
  <alias
   match="LevelMessagesOff"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

EnableTriggerGroup("Level_Messages", false)
Send ("Info Levels")
Note ("Level Messages disabled")

</send>
  </alias>
  <!-- LevelingMessages Aliases Section -->
  
  <!-- PupMessages Aliases Section -->
  <alias
   match="PupMessagesOn"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

EnableTriggerGroup("PuP_Messages", true)
Send ("Info Powerups")
Note ("Pup Messages enabled")

</send>
  </alias>
  <alias
   match="PupMessagesOff"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>

EnableTriggerGroup("PuP_Messages", false)
Send ("Info Powerups")
Note ("Pup Messages disabled")

</send>
  </alias>
  <!-- PupMessages Aliases Section -->
  
  <!-- Ahunt Aliases Section -->
  <alias
   match="^ahunt( .*){0,1}$"
   enabled="y"
   expand_variables="y"
   group="Ahunt"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local huntmob = Trim("%1")
	if huntmob == '-help' then
  	    Note("***************** Ahunt Commands ******************")
	    Note(" ahunt *keyword*   - Hunt keyword.                *")
	    Note(" ahuntquit         - Turn ahunt off.              *")
	    Note("***************************************************")
  	else
  		SetVariable ("AhuntMob","%1")
		Send ("hunt %1")
		SetVariable ("AhuntStatus","on")
	end</send>
  </alias>
  <alias
   match="^ahuntquit"
   enabled="y"
   group="Ahunt"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>SetVariable ("AhuntMob","")

SetVariable ("AhuntStatus","off")

Note ("* * Ahunt Turned Off * *")</send>
  </alias>
  <!-- Ahunt Aliases Section -->
  
  <!-- Potion Aliases Section -->
  <alias
   match="^pot -help$"

   enabled="y"
   group="potions"
   expand_variables="y"

   regexp="y"
   send_to="12"
   sequence="100"

  >
  <send>    Note("**************Potions Commands ***************")
	    Note(" potCheck        - Show potion bag contents. *")
	    Note(" potList         - Potion keyword list.      *")
	    Note(" setPotionsBag   - Bag for potions.          *")
	    Note("**********************************************")</send>
  </alias>
  <alias
   match="^potCheck$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("examine " ..getPotionBag())</send>
  </alias>
  <alias
   match="^potList$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Note("*************** Potions ****************")
        Note("KEYWORD           NAME            LEVEL*")
        Note("***************** Mana *****************")
        Note("*tea       Green Herbal Tea        60  *")
        Note("*spirits   Call upon Spirits       90  *")
        Note("*rotgut    tankard of Rotgut       100 *")
        Note("*ances     Ancestral Power         150 *")
        Note("*grog      Captain Morgan's Grog   200 *")
        Note("*wine      Moonlight Wine          201 *")
        Note("****************************************")
        Note("***************** Heal *****************")
        Note("*jade      Jade Elixir             60  *")
        Note("*keg       Keg of Rum              60  *")
        Note("*rum       Freeze-Dried Astronaut  201 *")
        Note("****************************************")															
        Note("*************** Refresh ****************")
        Note("*cruref     Divine Refreshment     50  *")
        Note("*domiref    Refreshing Idea       100  *")
		Note("*daoref     FaetorAde             150  *")
        Note("****************************************")															
        Note("**************** Other *****************")
        Note("*griff     Griffon Blood(Fly)      01  *")
		Note("*eyes      Eyes of the Wolf        01  *")
		Note("*fmove     Seekers Free Movement   17  *")
		Note("*manu      Seekers Maneuverability 48  *")
		Note("****************************************")
		Note("* Add 'Buy' to keyword to run to vendor*")
		Note("****************************************")
  </send>
  </alias>
  <alias
   match="^setPotionsBag( .*){0,1}$"
   enabled="y"
   regexp="y"
   group="potions"
   send_to="12"
   sequence="100"
  >
  <send>setPotionBag(Trim("%1"))
Note ("PotionsBag is now: %1")</send>
  </alias>
  <alias
   match="^tea$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take tea " ..getPotionBag())
Send("quaff tea")</send>
  </alias>
<alias
   match="^spirits$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take spirits " ..getPotionBag())
Send("quaff spirits")</send>
  </alias>
<alias
   match="^rotgut$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take rotgut " ..getPotionBag())
Send("quaff rotgut")</send>
  </alias>
<alias
   match="^ances$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take ancestral " ..getPotionBag())
Send("quaff ancestral")</send>
  </alias>
<alias
   match="^grog$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take level200mana " ..getPotionBag())
Send("quaff level200mana")</send>
  </alias>
<alias
   match="^wine$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take wine " ..getPotionBag())
Send("quaff wine")</send>
  </alias>
<alias
   match="^jade$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take jade " ..getPotionBag())
Send("quaff jade")</send>
  </alias>
<alias
   match="^keg$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take hookheal " ..getPotionBag())
Send("quaff hookheal")</send>
  </alias>
<alias
   match="^rum$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take freeze-dried " ..getPotionBag())
Send("eat freeze-dried")</send>
  </alias>
<alias
   match="^cruref$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take crusader50moves " ..getPotionBag())
Send("quaff crusader50moves")</send>
  </alias>
<alias
   match="^domiref$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take domiref " ..getPotionBag())
Send("quaff domiref")</send>
  </alias>
<alias
   match="^daoref$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take daoinerefresh " ..getPotionBag())
Send("quaff daoinerefresh")</send>
  </alias>  
<alias
   match="^griff$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take griffon " ..getPotionBag())
Send("quaff griffon")</send>
  </alias>
<alias
   match="^eyes$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take eyes " ..getPotionBag())
Send("quaff eyes")</send>
  </alias>
  <alias
   match="^fmove$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take seekers17dissolve " ..getPotionBag())
Send("quaff seekers17dissolve")</send>
  </alias>
<alias
   match="^manu$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Send("take seekers48spellup " ..getPotionBag())
Send("quaff seekers48spellup")</send>
  </alias>
  <alias
   match="^teaBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 5865")
      Send("buy " ..vItem.. "  3")
</send>
  </alias>
  <alias
   match="^spiritsBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 5865")
      Send("buy " ..vItem.. "  7")
</send>
  </alias>
  <alias
   match="^rotgutBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 2292")
      Send("buy " ..vItem.. "  2")
</send>
  </alias>
  <alias
   match="^ancesBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 5865")
      Send("buy " ..vItem.. "  2")
</send>
  </alias>
  <alias
   match="^grogBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 2292")
      Send("buy " ..vItem.. "  1")
</send>
  </alias>
  <alias
   match="^wineBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 5865")
      Send("buy " ..vItem.. "  1")
</send>
  </alias>
  <alias
   match="^jadeBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 5865")
      Send("buy " ..vItem.. "  4")
</send>
  </alias>
  <alias
   match="^kegBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto nomap_A Bar On Deck_hook")
      Send("buy " ..vItem.. "  14")
</send>
  </alias>
  <alias
   match="^rumBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto nomap_A Bar On Deck_hook")
      Send("buy " ..vItem.. "  1")
</send>
  </alias>  
  <alias
   match="^crurefBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 31123")
      Send("buy " ..vItem.. " 1")
</send>
  </alias>
  <alias
   match="^domirefBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 5865")
      Send("buy " ..vItem.. " 5")
</send>
  </alias>
  <alias
   match="^daorefBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 30949")
      Send("buy " ..vItem.. " 6")
</send>
  </alias>
  <alias
   match="^griffBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 32476")
      Send("buy " ..vItem.. "  13")
</send>
  </alias>
  <alias
   match="^eyesBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 32476")
      Send("buy " ..vItem.. "  17")
</send>
  </alias>
  <alias
   match="^fmoveBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 14141")
      Send("buy " ..vItem.. "  20")
</send>
  </alias>
  <alias
   match="^manuBuy (?P&lt;itemCount&gt;.*)$"
   enabled="y"
   expand_variables="y"
   group="potions"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>local vItem = Trim("%&lt;itemCount&gt;")
      Execute("mapper goto 14141")
      Send("buy " ..vItem.. "  16")
</send>
  </alias>
  <!-- Potion Aliases Section -->

</aliases>

<!--  Variables  -->
<variables>

  <!-- Ahunt Section -->
  <variable name="AhuntMob"></variable>
  <variable name="AhuntLastDir">north</variable>
  <variable name="AhuntStatus">off</variable>
  <!-- Ahunt Section -->
  
</variables>

<!--  Script  -->
<script>

	<!-- HibPlugin Section -->
	function OnPluginInstall()
		DbandVerCheck()
	end
	
	function databasePathName()
		dbCharacterName = "HibPlugin-" ..GetInfo (3)
		dbPath = GetInfo (66)
		databasePaN = dbPath .. dbCharacterName
		return databasePaN
	end
	
	function DbandVerCheck()
		
		dbPathandName = databasePathName()
		local pluginVer = GetPluginInfo (GetPluginID (),19)
		local versioN = 0
		local sQL ="SELECT version FROM dbVer;"
		local verTable = false
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows("SELECT name FROM sqlite_master WHERE type='table' AND name='dbVer';") do verTable = true end
		if verTable == false then
			myDB:close()
			createHibDB()
		else
			for a in myDB:nrows(sQL) do versioN = a.version end
			myDB:close()
			
			if versioN ~= pluginVer then
				updateHibDB()
			else
				print("HibPlugin db current")
			end
			
		end
		
	end
	
	function createHibDB()
		tableCreateDBVer()
		weaponMasterTableCreate()
		scriberTableCreate()
		potionsTableCreate()
		tableCreateUserLevel()
		tableCreateUserTier()
	end
	
	function updateHibDB()
		tableUpdateDBVer()
		weaponMasterTableCreate()
		scriberTableCreate()
		potionsTableCreate()
		tableCreateUserLevel()
		tableCreateUserTier()
	end
	
	function tableCreateDBVer()
		local pluginVer = GetPluginInfo (GetPluginID (),19)
		local sQL = "INSERT INTO dbVer VALUES (" ..pluginVer.. ");"
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "dbVer" (	"version"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("version"));]=]
		myDB:exec(sQL)
		myDB:close()
		print("HibPlugin db created!")
	end
	
	function tableUpdateDBVer()
		local pluginVer = GetPluginInfo (GetPluginID (),19)
		local sQL = "UPDATE dbVer SET version = " ..pluginVer.. ";"
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "dbVer" (	"version"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("version"));]=]
		myDB:exec(sQL)
		myDB:close()
		print("HibPlugin db created!")
	end
	
	function tableCreateUserLevel()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "userLevel" (	"uLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("uLevel"));]=]
		myDB:exec[=[INSERT INTO userLevel VALUES (1);]=]
		myDB:close()
		print("userLevel table created!")
	end
	
	function tableCreateUserTier()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "userTier" (	"uTier"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("uTier"));]=]
		myDB:exec[=[INSERT INTO userTier VALUES (1);]=]
		myDB:close()
		print("userTier table created!")
	end
	
	function getPlayerLevel()
		dbPathandName = databasePathName()
		local sQL = "SELECT uLevel FROM userLevel;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do playerLevel = row.uLevel end
		returnInfo = playerLevel
		myDB:close()
		
		return returnInfo
	end
	
	function setLevel(newLevel)
		dbPathandName = databasePathName()
		local sQL = "UPDATE userLevel SET uLevel = " ..newLevel.. ";"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Current Level is now: " ..newLevel)
		end
	end
		
	function getTieredLevel()
		local level = getPlayerLevel()
		local tier = getPlayerTier()
		local tieredLevel = (level + (tier * 10))
	
		return tieredLevel
	end
	
	function setTier(newTier)
		dbPathandName = databasePathName()
		local sQL = "UPDATE userTier SET uTier = " ..newTier.. ";"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Current Tier is now: " ..newTier)
		end
	end
	
	function getPlayerTier()
		dbPathandName = databasePathName()
		local sQL = "SELECT uTier FROM userTier;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do playerTier = row.uTier end
		returnInfo = playerTier
		myDB:close()
		
		return returnInfo
	end
	
	<!-- Weapon Master Section -->
	function weaponMasterTableCreate()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "wm_vars" (	"altCurrent"	TEXT NOT NULL,	"altUp"	TEXT NOT NULL,	"holdCurrent"	TEXT NOT NULL,	"mhCurrent"	TEXT NOT NULL,	"ohCurrent"	TEXT NOT NULL,	"shieldCurrent"	TEXT NOT NULL,	"shieldUp"	TEXT NOT NULL,	"weaponBag"	TEXT NOT NULL);]=]
		local addVars = wm_AddVars()
		if addVars == 0 then
			myDB:exec[=[INSERT INTO wm_vars VALUES ('None','Pri','None','None','None','None','ShieldDown','None');]=]
		end
		myDB:exec[=[CREATE TABLE "weapons" (	"weapId"	INTEGER NOT NULL UNIQUE,	"weapName"	TEXT NOT NULL UNIQUE,	"weapLevel"	INTEGER NOT NULL,	"weapMainOff"	INTEGER NOT NULL,	"weapPriAlt"	INTEGER NOT NULL,	PRIMARY KEY("weapId" AUTOINCREMENT));]=]
		myDB:exec[=[CREATE TABLE "holditems" (	"hiId"	INTEGER NOT NULL UNIQUE,	"hiName"	TEXT NOT NULL UNIQUE,	"hiLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("hiId" AUTOINCREMENT));]=]
		myDB:exec[=[CREATE TABLE "shields" (	"shieldId"	INTEGER NOT NULL UNIQUE,	"shieldName"	TEXT NOT NULL UNIQUE,	"shieldLevel"	INTEGER NOT NULL UNIQUE,	PRIMARY KEY("shieldId" AUTOINCREMENT));]=]
		myDB:close()
		print("weaponMaster tables created!")
	end
	
	function wm_AddVars()
		dbPathandName = databasePathName()
		local sQL = "SELECT COUNT(*) AS varCount FROM wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do varCOUNT = row.varCount end
		returnInfo = varCOUNT
		myDB:close()
		
		return returnInfo
	end
	
	function getAltCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT altCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do altCURRENT = row.altCurrent end
		returnInfo = altCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setAltCurrent(newAlt)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET altCurrent = '" ..newAlt.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getAltUp()
		dbPathandName = databasePathName()
		local sQL = "SELECT altUp from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do altUP = row.altUp end
		returnInfo = altUP
		myDB:close()
		
		return returnInfo
	end
	
	function setAltUp()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET altUp = 'Alt';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function setAltDown()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET altUp = 'Pri';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getHoldCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT holdCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do holdCURRENT = row.holdCurrent end
		returnInfo = holdCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setHoldCurrent(newHold)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET holdCurrent = '" ..newHold.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getMHCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT mhCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do MHCURRENT = row.mhCurrent end
		returnInfo = MHCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setMHCurrent(newMH)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET mhCurrent = '" ..newMH.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getOHCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT ohCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do OHCURRENT = row.ohCurrent end
		returnInfo = OHCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setOHCurrent(newOH)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET ohCurrent = '" ..newOH.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getShieldCurrent()
		dbPathandName = databasePathName()
		local sQL = "SELECT shieldCurrent from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do ShieldCURRENT = row.shieldCurrent end
		returnInfo = ShieldCURRENT
		myDB:close()
		
		return returnInfo
	end
	
	function setShieldCurrent(newShield)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET shieldCurrent = '" ..newShield.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getShieldUp()
		dbPathandName = databasePathName()
		local sQL = "SELECT shieldUp from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do shieldUP = row.shieldUp end
		returnInfo = shieldUP
		myDB:close()
		
		return returnInfo
	end
	
	function setShieldUp()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET shieldUp = 'ShieldUp';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
	end
	
	function setShieldDown()
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET shieldUp = 'ShieldDown';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getWeaponBag()
		dbPathandName = databasePathName()
		local sQL = "SELECT weaponBag from wm_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do weaponBAG = row.weaponBag end
		returnInfo = weaponBAG
		myDB:close()
		
		return returnInfo
	end
	
	function setWeaponBag(newWeaponBag)
		dbPathandName = databasePathName()
		local sQL = "UPDATE wm_vars SET weaponBag = '" ..newWeaponBag.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
		
	function inputLevel()
		results = utils.inputbox ("Item Level", "Enter Level","","Courier",10,{validate = level_Check,max_length = 3})
		return results
	end
	
	function level_check(l)
		local n = tonumber (l)
		
		if not n then
			utils.msgbox (l .. " is not numeric")
			return false
		end
		
		if n &lt; 1 or n > 291 then
			utils.msgbox (l .. " is out of range 1 to 291")
			return false
		end
				
		return true
	end
	
	function chooseMHOH()
		t = {"Main Hand","Off Hand"}
		results = utils.choose ("Main hand or Off hand?", "Weapon info", t, 1)
		if results then
			return results
		else
			return 1
		end	
	end
	
	function choosePriAlt()
		t = {"Primary","Alternative"}
		results = utils.choose ("Primary weapon or alternative?", "Weapon info", t, 1)
		if results then
			return results
		else
			return 1
		end
	end
	
	function weaponInsert(wi_weapname)
		local dup = weaponDupCheck(wi_weapname)
		if dup == true then
			print("Weapon already exists!")
		else
			resultsLevel = inputLevel()
			resultsMHOH = chooseMHOH()
			resultsPriAlt = choosePriAlt()
			insertWeapon(wi_weapname,resultsLevel,resultsMHOH,resultsPriAlt)
		end
	end
		
	function weaponDupCheck(iw_weapname)
		dbPathandName = databasePathName()
		local dupCheck = false
		local sQL = "SELECT * FROM weapons WHERE weapname = '" ..iw_weapname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertWeapon(iw_weapname,iw_weaplevel,iw_weapmainoff,iw_weapprialt)
		dbPathandName = databasePathName()
		local sQL = "INSERT INTO weapons (weapName,weapLevel,weapMainOff,weapPriAlt) VALUES ('" ..iw_weapname.. "'," ..iw_weaplevel.. "," ..iw_weapmainoff.. "," ..iw_weapprialt.. ");"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Weapon Added!")
		end
	end
	
	function holdInsert(hi_holdname)
		local dup = holdDupCheck(hi_holdname)
		if dup == true then
			print("Hold item already exists!")
		else
			resultsLevel = inputLevel()
			insertHold(hi_holdname,resultsLevel)
		end
	end
	
	function holdDupCheck(ih_holdname)
		dbPathandName = databasePathName()
		local dupCheck = false
		local sQL = "SELECT * FROM holditems WHERE hiName = '" ..ih_holdname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertHold(ih_holdname,ih_holdlevel)
		dbPathandName = databasePathName()
		local sQL = "INSERT INTO holditems (hiName,hiLevel) VALUES ('" ..ih_holdname.. "'," ..ih_holdlevel.. ");"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Hold item Added!")
		end
	end
	
	function shieldInsert(si_shieldname)
		local dup = shieldDupCheck(si_shieldname)
		if dup == true then
			print("Sheild already exists!")
		else
			resultsLevel = inputLevel()
			insertShield(si_shieldname,resultsLevel)
		end
	end
	
	function shieldDupCheck(is_shieldname)
		dbPathandName = databasePathName()
		local sQL = "SELECT * FROM shields WHERE shieldName = '" ..is_shieldname.. "';"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do dupCheck = true end
		myDB:close()
		
		return dupCheck
	end
			
	function insertShield(is_shieldname,is_shieldlevel)
		dbPathandName = databasePathName()
		local sQL = "INSERT INTO shields (shieldName,shieldLevel) VALUES ('" ..is_shieldname.. "'," ..is_shieldlevel.. ");"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		local result = myDB:exec(sQL)
		myDB:close()
		if result == 0 then
			print("Shield Added!")
		end
	end
	
	function shieldUp()
		setShieldUp()
		
		SendNoEcho ("take " ..getHoldCurrent().. " " ..getWeaponBag())
		SendNoEcho ("take " ..getShieldCurrent().. " " ..getWeaponBag())
		SendNoEcho ("hold " ..getShieldCurrent())
		SendNoEcho ("hold " ..getHoldCurrent())
		SendNoEcho ("put " ..getOHCurrent().. " " ..getWeaponBag())
	end
	
	function shieldDown()
		setShieldDown()
		
		SendNoEcho ("take " ..getOHCurrent().. " " ..getWeaponBag())
		SendNoEcho ("second " ..getOHCurrent())
		SendNoEcho ("put " ..getShieldCurrent().. " " ..getWeaponBag())
		SendNoEcho ("put " ..getHoldCurrent().. " " ..getWeaponBag())
	end
	
	function altUp()
		if getAltUp() ~= "Alt" then
			if getAltCurrent() ~= "None" then
				setAltUp()
				
				SendNoEcho ("take " ..getAltCurrent().. " " ..getWeaponBag())
				SendNoEcho ("wield " ..getAltCurrent())
				SendNoEcho ("put " ..getMHCurrent().. " " ..getWeaponBag())
			else
				possibleAlt = getAltName()
				if possibleAlt ~= "None" then
					setAltUp()
					setAltCurrent(possibleAlt)
					SendNoEcho ("take " ..getAltCurrent().. " " ..getWeaponBag())
					SendNoEcho ("wield " ..getAltCurrent())
					SendNoEcho ("put " ..getMHCurrent().. " " ..getWeaponBag())
				else
					print("No Alt weapons found!")
				end
			end
		end
	end
	
	function altDown()
		if getAltUp() ~= "Pri" then
			if getAltCurrent() ~= "None" then
				setAltDown()
				SendNoEcho ("take " ..getMHCurrent().. " " ..getWeaponBag())
				SendNoEcho ("wield " ..getMHCurrent())
				SendNoEcho ("put " ..getAltCurrent().. " " ..getWeaponBag())
			else
				print("No Alt weapons set!")
			end
		end
	end
	
	function getMHName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 1 AND weapPriAlt = 1 ORDER BY weapLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do mhCurrent = row.weapName end
		returnInfo = mhCurrent
		myDB:close()
		
		return returnInfo
	end
	
	function getOHName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 2 AND weapPriAlt = 1 ORDER BY weapLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do ohCurrent = row.weapName end
		returnInfo = ohCurrent
		myDB:close()
		if returnInfo == nil then
			returnInfo = "None"
		end
		return returnInfo
	end
	
	function getAltName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT weapName FROM weapons WHERE weapLevel &lt;= " ..modLevel.. " AND weapMainOff = 1 AND weapPriAlt = 2 ORDER BY weapLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do altCurrent = row.weapName end
		returnInfo = altCurrent
		myDB:close()
		if returnInfo == nil then
			returnInfo = "None"
		end
		return returnInfo
	end
	
	function getHoldName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT hiName FROM holditems WHERE hiLevel &lt;= " ..modLevel.. " ORDER BY hiLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do holdCurrent = row.hiName end
		returnInfo = holdCurrent
		myDB:close()
		
		return returnInfo
	end
	
	function getShieldName()
		dbPathandName = databasePathName()
		local modLevel = getTieredLevel()
		local sQL = "SELECT shieldName FROM shields WHERE shieldLevel &lt;= " ..modLevel.. " ORDER BY shieldLevel DESC LIMIT 1;"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do shieldCurrent = row.shieldName end
		returnInfo = shieldCurrent
		myDB:close()
		
		return returnInfo
	end

	function weapSwap()
		local altUp = getAltUp()
		local shieldUp = getShieldUp()
		local newMHName = getMHName()
		local currentMHName = getMHCurrent()
		if newMHName ~= currentMHName and altUp == "Pri" then
			setMHCurrent(newMHName)
			SendNoEcho("get " ..newMHName.. " " ..getWeaponBag())
			SendNoEcho("wield " ..newMHName)
			SendNoEcho("put " ..currentMHName.. " " ..getWeaponBag())
		elseif newMHName ~= currentMHName and altUp == "Alt" then
			setMHCurrent(newMHName)
		end
		
		local newOHName = getOHName()
		local currentOHName = getOHCurrent()
		if newOHName ~= currentOHName and shieldUp == "ShieldDown" then
			setOHCurrent(newOHName)
			SendNoEcho("get " ..newOHName.. " " ..getWeaponBag())
			SendNoEcho("second " ..newOHName)
			SendNoEcho("put " ..currentOHName.. " " ..getWeaponBag())
		elseif newOHName ~= currentOHName and shieldUp == "ShieldUp" then
			setOHCurrent(newOHName)
		end
		
		local newHoldName = getHoldName()
		local currentHoldName = getHoldCurrent()
		if newHoldName ~= currentHoldName and shieldUp == "ShieldUp" then
			setHoldCurrent(newHoldName)
			SendNoEcho("get " ..newHoldName.. " " ..getWeaponBag())
			SendNoEcho("wear " ..newHoldName)
			SendNoEcho("put " ..currentHoldName.. " " ..getWeaponBag())
		elseif newHoldName ~= currentHoldName and shieldUp == "ShieldDown" then
			setHoldCurrent(newHoldName)
		end
		
		local newShieldName = getShieldName()
		local currentShieldName = getShieldCurrent()
		if newShieldName ~= currentShieldName and shieldUp == "ShieldUp" then
			setShieldCurrent(newShieldName)
			SendNoEcho("get " ..newShieldName.. " " ..getWeaponBag())
			SendNoEcho("wear " ..newShieldName)
			SendNoEcho("put " ..currentShieldName.. " " ..getWeaponBag())
		elseif newShieldName ~= currentShieldName and shieldUp == "ShieldDown" then
			setShieldCurrent(newShieldName)
		end
		
		local newAltName = getAltName()
		local currentAltName = getAltCurrent()
		if newAltName ~= currentAltName and altUp == "Alt" then
			setAltCurrent(newAltName)
			SendNoEcho("get " ..newAltName.. " " ..getWeaponBag())
			SendNoEcho("wield " ..newAltName)
			SendNoEcho("put " ..currentAltName.. " " ..getWeaponBag())
		elseif newAltName ~= currentAltName and altUp == "Pri" then
			setAltCurrent(newAltName)
		end
	end
	
	function getWeaponList()
		dbPathandName = databasePathName()
		local sQL = "SELECT weapName,weapLevel,weapMainOff,weapPriAlt FROM weapons ORDER BY weapLevel,weapMainOff,weapPriAlt"
		local priAlt = ""
		local mainOff = ""
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("                    Weapon List                        ")
			print("    Name         Level       Main/Off      Pri/Alt     ")
			print("---------------------------------------------------------------")
		for row in myDB:nrows(sQL) do
			if row.weapMainOff == 1 then
				mainOff = "MainHand"
			else
				mainOff = "OffHand"
			end
			if row.weapPriAlt == 1 then
				priAlt = "Primary"
			else
				priAlt = "Alternate"
			end
			print(" " ..row.weapName.. "         " ..row.weapLevel.. "         " ..mainOff.. "         " ..priAlt)
		
		end	
			print("---------------------------------------------------------------")
		myDB:close()
		
	end
	
	function getHoldList()
		dbPathandName = databasePathName()
		local sQL = "SELECT hiName,hiLevel FROM holditems ORDER BY hiLevel"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("        Hold List            ")
			print("    Name         Level       ")
			print("-----------------------------")
		for row in myDB:nrows(sQL) do
			print(" " ..row.hiName.. "         " ..row.hiLevel)
		end	
			print("-----------------------------")
		myDB:close()
		
	end
	
	function getShieldList()
		dbPathandName = databasePathName()
		local sQL = "SELECT shieldName,shieldLevel FROM shields ORDER BY shieldLevel"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
			print("       Shield List           ")
			print("    Name         Level       ")
			print("-----------------------------")
		for row in myDB:nrows(sQL) do
			print(" " ..row.shieldName.. "         " ..row.shieldLevel)
		end	
			print("-----------------------------")
		myDB:close()
		
	end
	<!-- Weapon Master Section -->
	
  <!-- Scriber Section -->
  function scriberTableCreate()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "scriber_vars" (	"buyNumber"	INTEGER NOT NULL,	"scrollBag"	TEXT NOT NULL,	"spellCount"	INTEGER NOT NULL,	"spellName"	TEXT NOT NULL,	"spellCountRequired"	INTEGER NOT NULL,	"blankScrollBag"	TEXT NOT NULL);]=]
		local addVars = scriber_AddVars()
		if addVars == 0 then
			myDB:exec[=[INSERT INTO scriber_vars VALUES (20,'None',0,'None',3,'None');]=]
		end
		myDB:close()
		print("Scriber tables created!")
	end
	
	function scriber_AddVars()
		dbPathandName = databasePathName()
		local sQL = "SELECT COUNT(*) AS varCount FROM scriber_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do varCOUNT = row.varCount end
		returnInfo = varCOUNT
		myDB:close()
		
		return returnInfo
	end
	
	function getScrollBuyNumber()
		dbPathandName = databasePathName()
		local sQL = "SELECT buyNumber from scriber_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do scrollBuyNumber = row.buyNumber end
		returnInfo = scrollBuyNumber
		myDB:close()
		
		return returnInfo
	end
	
	function setScrollBuyNumber(newBuyNumber)
		dbPathandName = databasePathName()
		local sQL = "UPDATE scriber_vars SET buyNumber = " ..newBuyNumber.. ";"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getScrollBag()
		dbPathandName = databasePathName()
		local sQL = "SELECT scrollBag from scriber_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do scrollBAG = row.scrollBag end
		returnInfo = scrollBAG
		myDB:close()
		
		return returnInfo
	end
	
	function setScrollBag(newScrollBag)
		dbPathandName = databasePathName()
		local sQL = "UPDATE scriber_vars SET scrollBag = '" ..newScrollBag.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getSpellCount()
		dbPathandName = databasePathName()
		local sQL = "SELECT spellCount from scriber_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do spellCOUNT = row.spellCount end
		returnInfo = spellCOUNT
		myDB:close()
		
		return returnInfo
	end
	
	function setSpellCount(newSpellCount)
		dbPathandName = databasePathName()
		local sQL = "UPDATE scriber_vars SET spellCount = " ..newSpellCount.. ";"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getSpellName()
		dbPathandName = databasePathName()
		local sQL = "SELECT spellName from scriber_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do spellNAME = row.spellName end
		returnInfo = spellNAME
		myDB:close()
		
		return returnInfo
	end
	
	function setSpellName(newSpellName)
		dbPathandName = databasePathName()
		local sQL = "UPDATE scriber_vars SET spellName = '" ..newSpellName.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getSpellCountRequired()
		dbPathandName = databasePathName()
		local sQL = "SELECT spellCountRequired from scriber_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do spellCountREQUIRED = row.spellCountRequired end
		returnInfo = spellCountREQUIRED
		myDB:close()
		
		return returnInfo
	end
	
	function getBlankScrollBag()
		dbPathandName = databasePathName()
		local sQL = "SELECT blankScrollBag from scriber_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do blankScrollBAG = row.blankScrollBag end
		returnInfo = blankScrollBAG
		myDB:close()
		
		return returnInfo
	end
	
	function setBlankScrollBag(newScrollBag)
		dbPathandName = databasePathName()
		local sQL = "UPDATE scriber_vars SET blankScrollBag = '" ..newScrollBag.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
	function getHoldItem()
		dbPathandName = databasePathName()
		local shieldState = getShieldUp()
		local returnInfo = 'None'
		if shieldState == 'ShieldUp' then
			returnInfo = getHoldCurrent()
		elseif shieldState == 'ShieldDown' then
			returnInfo = getOHCurrent()
		end
		
		return returnInfo
	end
	
	function resetScribeVars()
	 	setSpellName('None')
		setSpellCount(0)
	end
	
	function evalScroll()
		local spellCountRequired = getSpellCountRequired()
		local currentSpellCount = getSpellCount()
		
		if currentSpellCount == 1 then
			Note("#1")
			if currentSpellCount ~= spellCountRequired then
				Send("scribe " ..getSpellName())
			else
				SendNoEcho("hold " ..getHoldItem())
				SendNoEcho("keep scroll")
				SendNoEcho("put scroll " ..getScrollBag())
				resetScribeVars()
			end
		elseif currentSpellCount == 2 then
			Note("#2")
			if currentSpellCount ~= spellCountRequired then
				Send("scribe " ..getSpellName())
			else
				SendNoEcho("hold " ..getHoldItem())
				SendNoEcho("keep scroll")
				SendNoEcho("put scroll " ..getScrollBag())
				resetScribeVars()
			end
		elseif currentSpellCount == 3 then
			Note("#3")
			if currentSpellCount ~= spellCountRequired then
				Send("scribe " ..getSpellName())
			else
				SendNoEcho("hold " ..getHoldItem())
				SendNoEcho("keep scroll")
				SendNoEcho("put scroll " ..getScrollBag())
				resetScribeVars()
			end
		elseif currentSpellCount == 4 then
			Note("#4")
			if currentSpellCount ~= spellCountRequired then
				Send("scribe " ..getSpellName())
			else
				SendNoEcho("hold " ..getHoldItem())
				SendNoEcho("keep scroll")
				SendNoEcho("put scroll " ..getScrollBag())
				resetScribeVars()
			end
		elseif currentSpellCount == 5 then
			Note("#5")
			SendNoEcho("hold " ..getHoldItem())
			SendNoEcho("keep scroll")
			SendNoEcho("put scroll " ..getScrollBag())
			resetScribeVars()
		end
	end
	
  <!-- Scriber Section -->
  
  <!-- Potion Section -->
  function potionsTableCreate()
		dbPathandName = databasePathName()
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec[=[CREATE TABLE "potions_vars" (	"potionBag"	TEXT NOT NULL UNIQUE,	PRIMARY KEY("potionBag"));]=]
		local addVars = potions_AddVars()
		if addVars == 0 then
			myDB:exec[=[INSERT INTO potions_vars VALUES ('None');]=]
		end
		myDB:close()
		print("potions table created!")
	end
	
	function potions_AddVars()
		dbPathandName = databasePathName()
		local sQL = "SELECT COUNT(*) AS varCount FROM potions_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do varCOUNT = row.varCount end
		returnInfo = varCOUNT
		myDB:close()
		
		return returnInfo
	end
	
	function getPotionBag()
		dbPathandName = databasePathName()
		local sQL = "SELECT potionBag from potions_vars"
		
		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		for row in myDB:nrows(sQL) do potionBAG = row.potionBag end
		returnInfo = potionBAG
		myDB:close()
		
		return returnInfo
	end
	
	function setPotionBag(newPotionBag)
		dbPathandName = databasePathName()
		local sQL = "UPDATE potions_vars SET potionBag = '" ..newPotionBag.. "';"

		myDB=assert(sqlite3.open(dbPathandName.. ".db"))
		myDB:exec(sQL)
		myDB:close()
	end
	
  <!-- Potion Section -->  
</script>

</muclient>
